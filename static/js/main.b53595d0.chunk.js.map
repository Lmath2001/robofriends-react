{"version":3,"sources":["containers/Card.js","containers/CardList.js","containers/SearchBox.js","containers/Scroll.js","components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","cardLoop","map","element","index","SearchBox","searchInput","type","placeholder","onChange","Scroll","children","App","onSearchInput","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+TAkBeA,EAfJ,SAACC,GAAS,IACZC,EAAeD,EAAfC,GAAGC,EAAYF,EAAZE,KAAKC,EAAOH,EAAPG,MACf,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACA,6BAAKJ,IACL,4BAAIC,WCKKI,EAZA,SAACP,GAAS,IAChBQ,EAAQR,EAARQ,OACDC,EAASD,EAAOE,KAAI,SAACC,EAAQC,GACjC,OAAO,cAAC,EAAD,CAAkBX,GAAIU,EAAQV,GAAIC,KAAMM,EAAOI,GAAOV,KAAMC,MAAOK,EAAOI,GAAOT,OAAtES,MAEpB,OACE,8BACGH,KCKQI,G,MAZC,SAACb,GAAS,IACjBc,EAAad,EAAbc,YACP,OACE,8BACE,uBAAOC,KAAK,SAASb,KAAK,YAAYD,GAAG,YAAYe,YAAY,qBACjEC,SAAUH,QCIDI,G,MATF,SAAClB,GACZ,OACE,qBAAKI,UAAU,SAAf,SACGJ,EAAMmB,aCkDEC,G,wDA/Cb,aAAc,IAAD,8BACX,gBAgBFC,cAAc,SAACC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAhBxC,EAAKC,MAAM,CACTnB,OAAO,GACPgB,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,OAAO,EAAKT,SAAS,CAACf,OAAOwB,S,oBASjC,WAAS,IAAD,OACCC,EAAeC,KAAKP,MAAMnB,OAAO2B,QAAO,SAACC,GAC5C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGpE,OAA8B,IAA3BH,KAAKP,MAAMnB,OAAO+B,OACZ,4CAIP,sBAAKnC,UAAU,YAAf,UACE,6CACA,cAAC,EAAD,CAAWU,YAAaoB,KAAKb,gBAC7B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUb,OAAQyB,a,GAtCVO,IAAMC,YCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b53595d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card=(props)=>{\r\n  const {id,name,email}=props\r\n  return(\r\n    <div className=\"card\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"Robots\"/>\r\n      <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=(props)=>{\r\n  const {robots}=props;\r\n  const cardLoop=robots.map((element,index)=>{\r\n    return <Card key={index} id={element.id} name={robots[index].name} email={robots[index].email} /> \r\n  })\r\n  return(\r\n    <div>\r\n      {cardLoop}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox=(props)=>{\r\n  const {searchInput}=props;\r\n  return(\r\n    <div>\r\n      <input type=\"search\" name=\"searchbox\" id=\"searchbox\" placeholder=\"Search your Robots\"\r\n      onChange={searchInput}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll=(props)=>{\r\n  return(\r\n    <div className=\"scroll\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../containers/CardList';\r\nimport SearchBox from '../containers/SearchBox';\r\nimport Scroll from '../containers/Scroll';\r\n// import { robots } from './robots.js';\r\n//Using API instead of robots.js\r\nimport './App.css';\r\nclass App extends React.Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      robots:[],\r\n      searchField:'',\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>{\r\n      return response.json()})\r\n    .then(users=>{\r\n      return this.setState({robots:users});\r\n    })\r\n  }\r\n\r\n  onSearchInput=(event)=>{\r\n    this.setState({searchField:event.target.value})\r\n  }\r\n\r\n\r\n  render(){\r\n     const filteredRobots=this.state.robots.filter((robot)=>{\r\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    });\r\n    // console.log(filteredRobots)\r\n    if(this.state.robots.length===0){\r\n      return <h1>Loading...</h1>\r\n    }\r\n    else{\r\n     return(\r\n      <div className=\"body-main\">\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox searchInput={this.onSearchInput}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n  );\r\n     }\r\n\r\n  }\r\n}\r\n \r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}